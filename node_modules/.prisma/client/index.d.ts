
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model HeartRate
 * 
 */
export type HeartRate = $Result.DefaultSelection<Prisma.$HeartRatePayload>
/**
 * Model Step
 * 
 */
export type Step = $Result.DefaultSelection<Prisma.$StepPayload>
/**
 * Model StressLog
 * 
 */
export type StressLog = $Result.DefaultSelection<Prisma.$StressLogPayload>
/**
 * Model SleepLog
 * 
 */
export type SleepLog = $Result.DefaultSelection<Prisma.$SleepLogPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.heartRate`: Exposes CRUD operations for the **HeartRate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HeartRates
    * const heartRates = await prisma.heartRate.findMany()
    * ```
    */
  get heartRate(): Prisma.HeartRateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.step`: Exposes CRUD operations for the **Step** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Steps
    * const steps = await prisma.step.findMany()
    * ```
    */
  get step(): Prisma.StepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stressLog`: Exposes CRUD operations for the **StressLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StressLogs
    * const stressLogs = await prisma.stressLog.findMany()
    * ```
    */
  get stressLog(): Prisma.StressLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sleepLog`: Exposes CRUD operations for the **SleepLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SleepLogs
    * const sleepLogs = await prisma.sleepLog.findMany()
    * ```
    */
  get sleepLog(): Prisma.SleepLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    HeartRate: 'HeartRate',
    Step: 'Step',
    StressLog: 'StressLog',
    SleepLog: 'SleepLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "heartRate" | "step" | "stressLog" | "sleepLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      HeartRate: {
        payload: Prisma.$HeartRatePayload<ExtArgs>
        fields: Prisma.HeartRateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HeartRateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HeartRateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          findFirst: {
            args: Prisma.HeartRateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HeartRateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          findMany: {
            args: Prisma.HeartRateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>[]
          }
          create: {
            args: Prisma.HeartRateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          createMany: {
            args: Prisma.HeartRateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HeartRateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>[]
          }
          delete: {
            args: Prisma.HeartRateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          update: {
            args: Prisma.HeartRateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          deleteMany: {
            args: Prisma.HeartRateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HeartRateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HeartRateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>[]
          }
          upsert: {
            args: Prisma.HeartRateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HeartRatePayload>
          }
          aggregate: {
            args: Prisma.HeartRateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHeartRate>
          }
          groupBy: {
            args: Prisma.HeartRateGroupByArgs<ExtArgs>
            result: $Utils.Optional<HeartRateGroupByOutputType>[]
          }
          count: {
            args: Prisma.HeartRateCountArgs<ExtArgs>
            result: $Utils.Optional<HeartRateCountAggregateOutputType> | number
          }
        }
      }
      Step: {
        payload: Prisma.$StepPayload<ExtArgs>
        fields: Prisma.StepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          findFirst: {
            args: Prisma.StepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          findMany: {
            args: Prisma.StepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>[]
          }
          create: {
            args: Prisma.StepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          createMany: {
            args: Prisma.StepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>[]
          }
          delete: {
            args: Prisma.StepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          update: {
            args: Prisma.StepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          deleteMany: {
            args: Prisma.StepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>[]
          }
          upsert: {
            args: Prisma.StepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepPayload>
          }
          aggregate: {
            args: Prisma.StepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStep>
          }
          groupBy: {
            args: Prisma.StepGroupByArgs<ExtArgs>
            result: $Utils.Optional<StepGroupByOutputType>[]
          }
          count: {
            args: Prisma.StepCountArgs<ExtArgs>
            result: $Utils.Optional<StepCountAggregateOutputType> | number
          }
        }
      }
      StressLog: {
        payload: Prisma.$StressLogPayload<ExtArgs>
        fields: Prisma.StressLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StressLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StressLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          findFirst: {
            args: Prisma.StressLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StressLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          findMany: {
            args: Prisma.StressLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>[]
          }
          create: {
            args: Prisma.StressLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          createMany: {
            args: Prisma.StressLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StressLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>[]
          }
          delete: {
            args: Prisma.StressLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          update: {
            args: Prisma.StressLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          deleteMany: {
            args: Prisma.StressLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StressLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StressLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>[]
          }
          upsert: {
            args: Prisma.StressLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StressLogPayload>
          }
          aggregate: {
            args: Prisma.StressLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStressLog>
          }
          groupBy: {
            args: Prisma.StressLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<StressLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.StressLogCountArgs<ExtArgs>
            result: $Utils.Optional<StressLogCountAggregateOutputType> | number
          }
        }
      }
      SleepLog: {
        payload: Prisma.$SleepLogPayload<ExtArgs>
        fields: Prisma.SleepLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SleepLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SleepLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          findFirst: {
            args: Prisma.SleepLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SleepLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          findMany: {
            args: Prisma.SleepLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>[]
          }
          create: {
            args: Prisma.SleepLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          createMany: {
            args: Prisma.SleepLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SleepLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>[]
          }
          delete: {
            args: Prisma.SleepLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          update: {
            args: Prisma.SleepLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          deleteMany: {
            args: Prisma.SleepLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SleepLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SleepLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>[]
          }
          upsert: {
            args: Prisma.SleepLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          aggregate: {
            args: Prisma.SleepLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSleepLog>
          }
          groupBy: {
            args: Prisma.SleepLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SleepLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SleepLogCountArgs<ExtArgs>
            result: $Utils.Optional<SleepLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    heartRate?: HeartRateOmit
    step?: StepOmit
    stressLog?: StressLogOmit
    sleepLog?: SleepLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    heartRates: number
    steps: number
    stressLogs: number
    sleepLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    heartRates?: boolean | UserCountOutputTypeCountHeartRatesArgs
    steps?: boolean | UserCountOutputTypeCountStepsArgs
    stressLogs?: boolean | UserCountOutputTypeCountStressLogsArgs
    sleepLogs?: boolean | UserCountOutputTypeCountSleepLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHeartRatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeartRateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStressLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StressLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSleepLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SleepLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    heartRates?: boolean | User$heartRatesArgs<ExtArgs>
    steps?: boolean | User$stepsArgs<ExtArgs>
    stressLogs?: boolean | User$stressLogsArgs<ExtArgs>
    sleepLogs?: boolean | User$sleepLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    heartRates?: boolean | User$heartRatesArgs<ExtArgs>
    steps?: boolean | User$stepsArgs<ExtArgs>
    stressLogs?: boolean | User$stressLogsArgs<ExtArgs>
    sleepLogs?: boolean | User$sleepLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      heartRates: Prisma.$HeartRatePayload<ExtArgs>[]
      steps: Prisma.$StepPayload<ExtArgs>[]
      stressLogs: Prisma.$StressLogPayload<ExtArgs>[]
      sleepLogs: Prisma.$SleepLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    heartRates<T extends User$heartRatesArgs<ExtArgs> = {}>(args?: Subset<T, User$heartRatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    steps<T extends User$stepsArgs<ExtArgs> = {}>(args?: Subset<T, User$stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stressLogs<T extends User$stressLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$stressLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sleepLogs<T extends User$sleepLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$sleepLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.heartRates
   */
  export type User$heartRatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    where?: HeartRateWhereInput
    orderBy?: HeartRateOrderByWithRelationInput | HeartRateOrderByWithRelationInput[]
    cursor?: HeartRateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HeartRateScalarFieldEnum | HeartRateScalarFieldEnum[]
  }

  /**
   * User.steps
   */
  export type User$stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    where?: StepWhereInput
    orderBy?: StepOrderByWithRelationInput | StepOrderByWithRelationInput[]
    cursor?: StepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepScalarFieldEnum | StepScalarFieldEnum[]
  }

  /**
   * User.stressLogs
   */
  export type User$stressLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    where?: StressLogWhereInput
    orderBy?: StressLogOrderByWithRelationInput | StressLogOrderByWithRelationInput[]
    cursor?: StressLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StressLogScalarFieldEnum | StressLogScalarFieldEnum[]
  }

  /**
   * User.sleepLogs
   */
  export type User$sleepLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    where?: SleepLogWhereInput
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    cursor?: SleepLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model HeartRate
   */

  export type AggregateHeartRate = {
    _count: HeartRateCountAggregateOutputType | null
    _avg: HeartRateAvgAggregateOutputType | null
    _sum: HeartRateSumAggregateOutputType | null
    _min: HeartRateMinAggregateOutputType | null
    _max: HeartRateMaxAggregateOutputType | null
  }

  export type HeartRateAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    bpm: number | null
  }

  export type HeartRateSumAggregateOutputType = {
    id: number | null
    userId: number | null
    bpm: number | null
  }

  export type HeartRateMinAggregateOutputType = {
    id: number | null
    userId: number | null
    bpm: number | null
    recordedAt: Date | null
  }

  export type HeartRateMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    bpm: number | null
    recordedAt: Date | null
  }

  export type HeartRateCountAggregateOutputType = {
    id: number
    userId: number
    bpm: number
    recordedAt: number
    _all: number
  }


  export type HeartRateAvgAggregateInputType = {
    id?: true
    userId?: true
    bpm?: true
  }

  export type HeartRateSumAggregateInputType = {
    id?: true
    userId?: true
    bpm?: true
  }

  export type HeartRateMinAggregateInputType = {
    id?: true
    userId?: true
    bpm?: true
    recordedAt?: true
  }

  export type HeartRateMaxAggregateInputType = {
    id?: true
    userId?: true
    bpm?: true
    recordedAt?: true
  }

  export type HeartRateCountAggregateInputType = {
    id?: true
    userId?: true
    bpm?: true
    recordedAt?: true
    _all?: true
  }

  export type HeartRateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeartRate to aggregate.
     */
    where?: HeartRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeartRates to fetch.
     */
    orderBy?: HeartRateOrderByWithRelationInput | HeartRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HeartRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeartRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeartRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HeartRates
    **/
    _count?: true | HeartRateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HeartRateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HeartRateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HeartRateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HeartRateMaxAggregateInputType
  }

  export type GetHeartRateAggregateType<T extends HeartRateAggregateArgs> = {
        [P in keyof T & keyof AggregateHeartRate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHeartRate[P]>
      : GetScalarType<T[P], AggregateHeartRate[P]>
  }




  export type HeartRateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HeartRateWhereInput
    orderBy?: HeartRateOrderByWithAggregationInput | HeartRateOrderByWithAggregationInput[]
    by: HeartRateScalarFieldEnum[] | HeartRateScalarFieldEnum
    having?: HeartRateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HeartRateCountAggregateInputType | true
    _avg?: HeartRateAvgAggregateInputType
    _sum?: HeartRateSumAggregateInputType
    _min?: HeartRateMinAggregateInputType
    _max?: HeartRateMaxAggregateInputType
  }

  export type HeartRateGroupByOutputType = {
    id: number
    userId: number
    bpm: number
    recordedAt: Date
    _count: HeartRateCountAggregateOutputType | null
    _avg: HeartRateAvgAggregateOutputType | null
    _sum: HeartRateSumAggregateOutputType | null
    _min: HeartRateMinAggregateOutputType | null
    _max: HeartRateMaxAggregateOutputType | null
  }

  type GetHeartRateGroupByPayload<T extends HeartRateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HeartRateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HeartRateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HeartRateGroupByOutputType[P]>
            : GetScalarType<T[P], HeartRateGroupByOutputType[P]>
        }
      >
    >


  export type HeartRateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bpm?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heartRate"]>

  export type HeartRateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bpm?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heartRate"]>

  export type HeartRateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bpm?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["heartRate"]>

  export type HeartRateSelectScalar = {
    id?: boolean
    userId?: boolean
    bpm?: boolean
    recordedAt?: boolean
  }

  export type HeartRateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "bpm" | "recordedAt", ExtArgs["result"]["heartRate"]>
  export type HeartRateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HeartRateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HeartRateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HeartRatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HeartRate"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      bpm: number
      recordedAt: Date
    }, ExtArgs["result"]["heartRate"]>
    composites: {}
  }

  type HeartRateGetPayload<S extends boolean | null | undefined | HeartRateDefaultArgs> = $Result.GetResult<Prisma.$HeartRatePayload, S>

  type HeartRateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HeartRateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HeartRateCountAggregateInputType | true
    }

  export interface HeartRateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HeartRate'], meta: { name: 'HeartRate' } }
    /**
     * Find zero or one HeartRate that matches the filter.
     * @param {HeartRateFindUniqueArgs} args - Arguments to find a HeartRate
     * @example
     * // Get one HeartRate
     * const heartRate = await prisma.heartRate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HeartRateFindUniqueArgs>(args: SelectSubset<T, HeartRateFindUniqueArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HeartRate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HeartRateFindUniqueOrThrowArgs} args - Arguments to find a HeartRate
     * @example
     * // Get one HeartRate
     * const heartRate = await prisma.heartRate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HeartRateFindUniqueOrThrowArgs>(args: SelectSubset<T, HeartRateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeartRate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateFindFirstArgs} args - Arguments to find a HeartRate
     * @example
     * // Get one HeartRate
     * const heartRate = await prisma.heartRate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HeartRateFindFirstArgs>(args?: SelectSubset<T, HeartRateFindFirstArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HeartRate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateFindFirstOrThrowArgs} args - Arguments to find a HeartRate
     * @example
     * // Get one HeartRate
     * const heartRate = await prisma.heartRate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HeartRateFindFirstOrThrowArgs>(args?: SelectSubset<T, HeartRateFindFirstOrThrowArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HeartRates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HeartRates
     * const heartRates = await prisma.heartRate.findMany()
     * 
     * // Get first 10 HeartRates
     * const heartRates = await prisma.heartRate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const heartRateWithIdOnly = await prisma.heartRate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HeartRateFindManyArgs>(args?: SelectSubset<T, HeartRateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HeartRate.
     * @param {HeartRateCreateArgs} args - Arguments to create a HeartRate.
     * @example
     * // Create one HeartRate
     * const HeartRate = await prisma.heartRate.create({
     *   data: {
     *     // ... data to create a HeartRate
     *   }
     * })
     * 
     */
    create<T extends HeartRateCreateArgs>(args: SelectSubset<T, HeartRateCreateArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HeartRates.
     * @param {HeartRateCreateManyArgs} args - Arguments to create many HeartRates.
     * @example
     * // Create many HeartRates
     * const heartRate = await prisma.heartRate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HeartRateCreateManyArgs>(args?: SelectSubset<T, HeartRateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HeartRates and returns the data saved in the database.
     * @param {HeartRateCreateManyAndReturnArgs} args - Arguments to create many HeartRates.
     * @example
     * // Create many HeartRates
     * const heartRate = await prisma.heartRate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HeartRates and only return the `id`
     * const heartRateWithIdOnly = await prisma.heartRate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HeartRateCreateManyAndReturnArgs>(args?: SelectSubset<T, HeartRateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HeartRate.
     * @param {HeartRateDeleteArgs} args - Arguments to delete one HeartRate.
     * @example
     * // Delete one HeartRate
     * const HeartRate = await prisma.heartRate.delete({
     *   where: {
     *     // ... filter to delete one HeartRate
     *   }
     * })
     * 
     */
    delete<T extends HeartRateDeleteArgs>(args: SelectSubset<T, HeartRateDeleteArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HeartRate.
     * @param {HeartRateUpdateArgs} args - Arguments to update one HeartRate.
     * @example
     * // Update one HeartRate
     * const heartRate = await prisma.heartRate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HeartRateUpdateArgs>(args: SelectSubset<T, HeartRateUpdateArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HeartRates.
     * @param {HeartRateDeleteManyArgs} args - Arguments to filter HeartRates to delete.
     * @example
     * // Delete a few HeartRates
     * const { count } = await prisma.heartRate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HeartRateDeleteManyArgs>(args?: SelectSubset<T, HeartRateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeartRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HeartRates
     * const heartRate = await prisma.heartRate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HeartRateUpdateManyArgs>(args: SelectSubset<T, HeartRateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HeartRates and returns the data updated in the database.
     * @param {HeartRateUpdateManyAndReturnArgs} args - Arguments to update many HeartRates.
     * @example
     * // Update many HeartRates
     * const heartRate = await prisma.heartRate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HeartRates and only return the `id`
     * const heartRateWithIdOnly = await prisma.heartRate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HeartRateUpdateManyAndReturnArgs>(args: SelectSubset<T, HeartRateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HeartRate.
     * @param {HeartRateUpsertArgs} args - Arguments to update or create a HeartRate.
     * @example
     * // Update or create a HeartRate
     * const heartRate = await prisma.heartRate.upsert({
     *   create: {
     *     // ... data to create a HeartRate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HeartRate we want to update
     *   }
     * })
     */
    upsert<T extends HeartRateUpsertArgs>(args: SelectSubset<T, HeartRateUpsertArgs<ExtArgs>>): Prisma__HeartRateClient<$Result.GetResult<Prisma.$HeartRatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HeartRates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateCountArgs} args - Arguments to filter HeartRates to count.
     * @example
     * // Count the number of HeartRates
     * const count = await prisma.heartRate.count({
     *   where: {
     *     // ... the filter for the HeartRates we want to count
     *   }
     * })
    **/
    count<T extends HeartRateCountArgs>(
      args?: Subset<T, HeartRateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HeartRateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HeartRate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HeartRateAggregateArgs>(args: Subset<T, HeartRateAggregateArgs>): Prisma.PrismaPromise<GetHeartRateAggregateType<T>>

    /**
     * Group by HeartRate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartRateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HeartRateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HeartRateGroupByArgs['orderBy'] }
        : { orderBy?: HeartRateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HeartRateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeartRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HeartRate model
   */
  readonly fields: HeartRateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HeartRate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HeartRateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HeartRate model
   */
  interface HeartRateFieldRefs {
    readonly id: FieldRef<"HeartRate", 'Int'>
    readonly userId: FieldRef<"HeartRate", 'Int'>
    readonly bpm: FieldRef<"HeartRate", 'Int'>
    readonly recordedAt: FieldRef<"HeartRate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HeartRate findUnique
   */
  export type HeartRateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter, which HeartRate to fetch.
     */
    where: HeartRateWhereUniqueInput
  }

  /**
   * HeartRate findUniqueOrThrow
   */
  export type HeartRateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter, which HeartRate to fetch.
     */
    where: HeartRateWhereUniqueInput
  }

  /**
   * HeartRate findFirst
   */
  export type HeartRateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter, which HeartRate to fetch.
     */
    where?: HeartRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeartRates to fetch.
     */
    orderBy?: HeartRateOrderByWithRelationInput | HeartRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeartRates.
     */
    cursor?: HeartRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeartRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeartRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeartRates.
     */
    distinct?: HeartRateScalarFieldEnum | HeartRateScalarFieldEnum[]
  }

  /**
   * HeartRate findFirstOrThrow
   */
  export type HeartRateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter, which HeartRate to fetch.
     */
    where?: HeartRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeartRates to fetch.
     */
    orderBy?: HeartRateOrderByWithRelationInput | HeartRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HeartRates.
     */
    cursor?: HeartRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeartRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeartRates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HeartRates.
     */
    distinct?: HeartRateScalarFieldEnum | HeartRateScalarFieldEnum[]
  }

  /**
   * HeartRate findMany
   */
  export type HeartRateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter, which HeartRates to fetch.
     */
    where?: HeartRateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HeartRates to fetch.
     */
    orderBy?: HeartRateOrderByWithRelationInput | HeartRateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HeartRates.
     */
    cursor?: HeartRateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HeartRates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HeartRates.
     */
    skip?: number
    distinct?: HeartRateScalarFieldEnum | HeartRateScalarFieldEnum[]
  }

  /**
   * HeartRate create
   */
  export type HeartRateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * The data needed to create a HeartRate.
     */
    data: XOR<HeartRateCreateInput, HeartRateUncheckedCreateInput>
  }

  /**
   * HeartRate createMany
   */
  export type HeartRateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HeartRates.
     */
    data: HeartRateCreateManyInput | HeartRateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HeartRate createManyAndReturn
   */
  export type HeartRateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * The data used to create many HeartRates.
     */
    data: HeartRateCreateManyInput | HeartRateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeartRate update
   */
  export type HeartRateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * The data needed to update a HeartRate.
     */
    data: XOR<HeartRateUpdateInput, HeartRateUncheckedUpdateInput>
    /**
     * Choose, which HeartRate to update.
     */
    where: HeartRateWhereUniqueInput
  }

  /**
   * HeartRate updateMany
   */
  export type HeartRateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HeartRates.
     */
    data: XOR<HeartRateUpdateManyMutationInput, HeartRateUncheckedUpdateManyInput>
    /**
     * Filter which HeartRates to update
     */
    where?: HeartRateWhereInput
    /**
     * Limit how many HeartRates to update.
     */
    limit?: number
  }

  /**
   * HeartRate updateManyAndReturn
   */
  export type HeartRateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * The data used to update HeartRates.
     */
    data: XOR<HeartRateUpdateManyMutationInput, HeartRateUncheckedUpdateManyInput>
    /**
     * Filter which HeartRates to update
     */
    where?: HeartRateWhereInput
    /**
     * Limit how many HeartRates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HeartRate upsert
   */
  export type HeartRateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * The filter to search for the HeartRate to update in case it exists.
     */
    where: HeartRateWhereUniqueInput
    /**
     * In case the HeartRate found by the `where` argument doesn't exist, create a new HeartRate with this data.
     */
    create: XOR<HeartRateCreateInput, HeartRateUncheckedCreateInput>
    /**
     * In case the HeartRate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HeartRateUpdateInput, HeartRateUncheckedUpdateInput>
  }

  /**
   * HeartRate delete
   */
  export type HeartRateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
    /**
     * Filter which HeartRate to delete.
     */
    where: HeartRateWhereUniqueInput
  }

  /**
   * HeartRate deleteMany
   */
  export type HeartRateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HeartRates to delete
     */
    where?: HeartRateWhereInput
    /**
     * Limit how many HeartRates to delete.
     */
    limit?: number
  }

  /**
   * HeartRate without action
   */
  export type HeartRateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HeartRate
     */
    select?: HeartRateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HeartRate
     */
    omit?: HeartRateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HeartRateInclude<ExtArgs> | null
  }


  /**
   * Model Step
   */

  export type AggregateStep = {
    _count: StepCountAggregateOutputType | null
    _avg: StepAvgAggregateOutputType | null
    _sum: StepSumAggregateOutputType | null
    _min: StepMinAggregateOutputType | null
    _max: StepMaxAggregateOutputType | null
  }

  export type StepAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    count: number | null
  }

  export type StepSumAggregateOutputType = {
    id: number | null
    userId: number | null
    count: number | null
  }

  export type StepMinAggregateOutputType = {
    id: number | null
    userId: number | null
    count: number | null
    recordedAt: Date | null
  }

  export type StepMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    count: number | null
    recordedAt: Date | null
  }

  export type StepCountAggregateOutputType = {
    id: number
    userId: number
    count: number
    recordedAt: number
    _all: number
  }


  export type StepAvgAggregateInputType = {
    id?: true
    userId?: true
    count?: true
  }

  export type StepSumAggregateInputType = {
    id?: true
    userId?: true
    count?: true
  }

  export type StepMinAggregateInputType = {
    id?: true
    userId?: true
    count?: true
    recordedAt?: true
  }

  export type StepMaxAggregateInputType = {
    id?: true
    userId?: true
    count?: true
    recordedAt?: true
  }

  export type StepCountAggregateInputType = {
    id?: true
    userId?: true
    count?: true
    recordedAt?: true
    _all?: true
  }

  export type StepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Step to aggregate.
     */
    where?: StepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Steps to fetch.
     */
    orderBy?: StepOrderByWithRelationInput | StepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Steps
    **/
    _count?: true | StepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StepMaxAggregateInputType
  }

  export type GetStepAggregateType<T extends StepAggregateArgs> = {
        [P in keyof T & keyof AggregateStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStep[P]>
      : GetScalarType<T[P], AggregateStep[P]>
  }




  export type StepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepWhereInput
    orderBy?: StepOrderByWithAggregationInput | StepOrderByWithAggregationInput[]
    by: StepScalarFieldEnum[] | StepScalarFieldEnum
    having?: StepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StepCountAggregateInputType | true
    _avg?: StepAvgAggregateInputType
    _sum?: StepSumAggregateInputType
    _min?: StepMinAggregateInputType
    _max?: StepMaxAggregateInputType
  }

  export type StepGroupByOutputType = {
    id: number
    userId: number
    count: number
    recordedAt: Date
    _count: StepCountAggregateOutputType | null
    _avg: StepAvgAggregateOutputType | null
    _sum: StepSumAggregateOutputType | null
    _min: StepMinAggregateOutputType | null
    _max: StepMaxAggregateOutputType | null
  }

  type GetStepGroupByPayload<T extends StepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StepGroupByOutputType[P]>
            : GetScalarType<T[P], StepGroupByOutputType[P]>
        }
      >
    >


  export type StepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    count?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["step"]>

  export type StepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    count?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["step"]>

  export type StepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    count?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["step"]>

  export type StepSelectScalar = {
    id?: boolean
    userId?: boolean
    count?: boolean
    recordedAt?: boolean
  }

  export type StepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "count" | "recordedAt", ExtArgs["result"]["step"]>
  export type StepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Step"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      count: number
      recordedAt: Date
    }, ExtArgs["result"]["step"]>
    composites: {}
  }

  type StepGetPayload<S extends boolean | null | undefined | StepDefaultArgs> = $Result.GetResult<Prisma.$StepPayload, S>

  type StepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StepCountAggregateInputType | true
    }

  export interface StepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Step'], meta: { name: 'Step' } }
    /**
     * Find zero or one Step that matches the filter.
     * @param {StepFindUniqueArgs} args - Arguments to find a Step
     * @example
     * // Get one Step
     * const step = await prisma.step.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StepFindUniqueArgs>(args: SelectSubset<T, StepFindUniqueArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Step that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StepFindUniqueOrThrowArgs} args - Arguments to find a Step
     * @example
     * // Get one Step
     * const step = await prisma.step.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StepFindUniqueOrThrowArgs>(args: SelectSubset<T, StepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Step that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepFindFirstArgs} args - Arguments to find a Step
     * @example
     * // Get one Step
     * const step = await prisma.step.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StepFindFirstArgs>(args?: SelectSubset<T, StepFindFirstArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Step that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepFindFirstOrThrowArgs} args - Arguments to find a Step
     * @example
     * // Get one Step
     * const step = await prisma.step.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StepFindFirstOrThrowArgs>(args?: SelectSubset<T, StepFindFirstOrThrowArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Steps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Steps
     * const steps = await prisma.step.findMany()
     * 
     * // Get first 10 Steps
     * const steps = await prisma.step.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stepWithIdOnly = await prisma.step.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StepFindManyArgs>(args?: SelectSubset<T, StepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Step.
     * @param {StepCreateArgs} args - Arguments to create a Step.
     * @example
     * // Create one Step
     * const Step = await prisma.step.create({
     *   data: {
     *     // ... data to create a Step
     *   }
     * })
     * 
     */
    create<T extends StepCreateArgs>(args: SelectSubset<T, StepCreateArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Steps.
     * @param {StepCreateManyArgs} args - Arguments to create many Steps.
     * @example
     * // Create many Steps
     * const step = await prisma.step.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StepCreateManyArgs>(args?: SelectSubset<T, StepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Steps and returns the data saved in the database.
     * @param {StepCreateManyAndReturnArgs} args - Arguments to create many Steps.
     * @example
     * // Create many Steps
     * const step = await prisma.step.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Steps and only return the `id`
     * const stepWithIdOnly = await prisma.step.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StepCreateManyAndReturnArgs>(args?: SelectSubset<T, StepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Step.
     * @param {StepDeleteArgs} args - Arguments to delete one Step.
     * @example
     * // Delete one Step
     * const Step = await prisma.step.delete({
     *   where: {
     *     // ... filter to delete one Step
     *   }
     * })
     * 
     */
    delete<T extends StepDeleteArgs>(args: SelectSubset<T, StepDeleteArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Step.
     * @param {StepUpdateArgs} args - Arguments to update one Step.
     * @example
     * // Update one Step
     * const step = await prisma.step.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StepUpdateArgs>(args: SelectSubset<T, StepUpdateArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Steps.
     * @param {StepDeleteManyArgs} args - Arguments to filter Steps to delete.
     * @example
     * // Delete a few Steps
     * const { count } = await prisma.step.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StepDeleteManyArgs>(args?: SelectSubset<T, StepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Steps
     * const step = await prisma.step.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StepUpdateManyArgs>(args: SelectSubset<T, StepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Steps and returns the data updated in the database.
     * @param {StepUpdateManyAndReturnArgs} args - Arguments to update many Steps.
     * @example
     * // Update many Steps
     * const step = await prisma.step.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Steps and only return the `id`
     * const stepWithIdOnly = await prisma.step.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StepUpdateManyAndReturnArgs>(args: SelectSubset<T, StepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Step.
     * @param {StepUpsertArgs} args - Arguments to update or create a Step.
     * @example
     * // Update or create a Step
     * const step = await prisma.step.upsert({
     *   create: {
     *     // ... data to create a Step
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Step we want to update
     *   }
     * })
     */
    upsert<T extends StepUpsertArgs>(args: SelectSubset<T, StepUpsertArgs<ExtArgs>>): Prisma__StepClient<$Result.GetResult<Prisma.$StepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepCountArgs} args - Arguments to filter Steps to count.
     * @example
     * // Count the number of Steps
     * const count = await prisma.step.count({
     *   where: {
     *     // ... the filter for the Steps we want to count
     *   }
     * })
    **/
    count<T extends StepCountArgs>(
      args?: Subset<T, StepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Step.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StepAggregateArgs>(args: Subset<T, StepAggregateArgs>): Prisma.PrismaPromise<GetStepAggregateType<T>>

    /**
     * Group by Step.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StepGroupByArgs['orderBy'] }
        : { orderBy?: StepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Step model
   */
  readonly fields: StepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Step.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Step model
   */
  interface StepFieldRefs {
    readonly id: FieldRef<"Step", 'Int'>
    readonly userId: FieldRef<"Step", 'Int'>
    readonly count: FieldRef<"Step", 'Int'>
    readonly recordedAt: FieldRef<"Step", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Step findUnique
   */
  export type StepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter, which Step to fetch.
     */
    where: StepWhereUniqueInput
  }

  /**
   * Step findUniqueOrThrow
   */
  export type StepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter, which Step to fetch.
     */
    where: StepWhereUniqueInput
  }

  /**
   * Step findFirst
   */
  export type StepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter, which Step to fetch.
     */
    where?: StepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Steps to fetch.
     */
    orderBy?: StepOrderByWithRelationInput | StepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Steps.
     */
    cursor?: StepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Steps.
     */
    distinct?: StepScalarFieldEnum | StepScalarFieldEnum[]
  }

  /**
   * Step findFirstOrThrow
   */
  export type StepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter, which Step to fetch.
     */
    where?: StepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Steps to fetch.
     */
    orderBy?: StepOrderByWithRelationInput | StepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Steps.
     */
    cursor?: StepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Steps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Steps.
     */
    distinct?: StepScalarFieldEnum | StepScalarFieldEnum[]
  }

  /**
   * Step findMany
   */
  export type StepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter, which Steps to fetch.
     */
    where?: StepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Steps to fetch.
     */
    orderBy?: StepOrderByWithRelationInput | StepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Steps.
     */
    cursor?: StepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Steps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Steps.
     */
    skip?: number
    distinct?: StepScalarFieldEnum | StepScalarFieldEnum[]
  }

  /**
   * Step create
   */
  export type StepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * The data needed to create a Step.
     */
    data: XOR<StepCreateInput, StepUncheckedCreateInput>
  }

  /**
   * Step createMany
   */
  export type StepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Steps.
     */
    data: StepCreateManyInput | StepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Step createManyAndReturn
   */
  export type StepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * The data used to create many Steps.
     */
    data: StepCreateManyInput | StepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Step update
   */
  export type StepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * The data needed to update a Step.
     */
    data: XOR<StepUpdateInput, StepUncheckedUpdateInput>
    /**
     * Choose, which Step to update.
     */
    where: StepWhereUniqueInput
  }

  /**
   * Step updateMany
   */
  export type StepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Steps.
     */
    data: XOR<StepUpdateManyMutationInput, StepUncheckedUpdateManyInput>
    /**
     * Filter which Steps to update
     */
    where?: StepWhereInput
    /**
     * Limit how many Steps to update.
     */
    limit?: number
  }

  /**
   * Step updateManyAndReturn
   */
  export type StepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * The data used to update Steps.
     */
    data: XOR<StepUpdateManyMutationInput, StepUncheckedUpdateManyInput>
    /**
     * Filter which Steps to update
     */
    where?: StepWhereInput
    /**
     * Limit how many Steps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Step upsert
   */
  export type StepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * The filter to search for the Step to update in case it exists.
     */
    where: StepWhereUniqueInput
    /**
     * In case the Step found by the `where` argument doesn't exist, create a new Step with this data.
     */
    create: XOR<StepCreateInput, StepUncheckedCreateInput>
    /**
     * In case the Step was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StepUpdateInput, StepUncheckedUpdateInput>
  }

  /**
   * Step delete
   */
  export type StepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
    /**
     * Filter which Step to delete.
     */
    where: StepWhereUniqueInput
  }

  /**
   * Step deleteMany
   */
  export type StepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Steps to delete
     */
    where?: StepWhereInput
    /**
     * Limit how many Steps to delete.
     */
    limit?: number
  }

  /**
   * Step without action
   */
  export type StepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Step
     */
    select?: StepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Step
     */
    omit?: StepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepInclude<ExtArgs> | null
  }


  /**
   * Model StressLog
   */

  export type AggregateStressLog = {
    _count: StressLogCountAggregateOutputType | null
    _avg: StressLogAvgAggregateOutputType | null
    _sum: StressLogSumAggregateOutputType | null
    _min: StressLogMinAggregateOutputType | null
    _max: StressLogMaxAggregateOutputType | null
  }

  export type StressLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    level: number | null
  }

  export type StressLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    level: number | null
  }

  export type StressLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    level: number | null
    recordedAt: Date | null
  }

  export type StressLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    level: number | null
    recordedAt: Date | null
  }

  export type StressLogCountAggregateOutputType = {
    id: number
    userId: number
    level: number
    recordedAt: number
    _all: number
  }


  export type StressLogAvgAggregateInputType = {
    id?: true
    userId?: true
    level?: true
  }

  export type StressLogSumAggregateInputType = {
    id?: true
    userId?: true
    level?: true
  }

  export type StressLogMinAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    recordedAt?: true
  }

  export type StressLogMaxAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    recordedAt?: true
  }

  export type StressLogCountAggregateInputType = {
    id?: true
    userId?: true
    level?: true
    recordedAt?: true
    _all?: true
  }

  export type StressLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StressLog to aggregate.
     */
    where?: StressLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StressLogs to fetch.
     */
    orderBy?: StressLogOrderByWithRelationInput | StressLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StressLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StressLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StressLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StressLogs
    **/
    _count?: true | StressLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StressLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StressLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StressLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StressLogMaxAggregateInputType
  }

  export type GetStressLogAggregateType<T extends StressLogAggregateArgs> = {
        [P in keyof T & keyof AggregateStressLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStressLog[P]>
      : GetScalarType<T[P], AggregateStressLog[P]>
  }




  export type StressLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StressLogWhereInput
    orderBy?: StressLogOrderByWithAggregationInput | StressLogOrderByWithAggregationInput[]
    by: StressLogScalarFieldEnum[] | StressLogScalarFieldEnum
    having?: StressLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StressLogCountAggregateInputType | true
    _avg?: StressLogAvgAggregateInputType
    _sum?: StressLogSumAggregateInputType
    _min?: StressLogMinAggregateInputType
    _max?: StressLogMaxAggregateInputType
  }

  export type StressLogGroupByOutputType = {
    id: number
    userId: number
    level: number
    recordedAt: Date
    _count: StressLogCountAggregateOutputType | null
    _avg: StressLogAvgAggregateOutputType | null
    _sum: StressLogSumAggregateOutputType | null
    _min: StressLogMinAggregateOutputType | null
    _max: StressLogMaxAggregateOutputType | null
  }

  type GetStressLogGroupByPayload<T extends StressLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StressLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StressLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StressLogGroupByOutputType[P]>
            : GetScalarType<T[P], StressLogGroupByOutputType[P]>
        }
      >
    >


  export type StressLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stressLog"]>

  export type StressLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stressLog"]>

  export type StressLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    level?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stressLog"]>

  export type StressLogSelectScalar = {
    id?: boolean
    userId?: boolean
    level?: boolean
    recordedAt?: boolean
  }

  export type StressLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "level" | "recordedAt", ExtArgs["result"]["stressLog"]>
  export type StressLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StressLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StressLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StressLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StressLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      level: number
      recordedAt: Date
    }, ExtArgs["result"]["stressLog"]>
    composites: {}
  }

  type StressLogGetPayload<S extends boolean | null | undefined | StressLogDefaultArgs> = $Result.GetResult<Prisma.$StressLogPayload, S>

  type StressLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StressLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StressLogCountAggregateInputType | true
    }

  export interface StressLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StressLog'], meta: { name: 'StressLog' } }
    /**
     * Find zero or one StressLog that matches the filter.
     * @param {StressLogFindUniqueArgs} args - Arguments to find a StressLog
     * @example
     * // Get one StressLog
     * const stressLog = await prisma.stressLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StressLogFindUniqueArgs>(args: SelectSubset<T, StressLogFindUniqueArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StressLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StressLogFindUniqueOrThrowArgs} args - Arguments to find a StressLog
     * @example
     * // Get one StressLog
     * const stressLog = await prisma.stressLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StressLogFindUniqueOrThrowArgs>(args: SelectSubset<T, StressLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StressLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogFindFirstArgs} args - Arguments to find a StressLog
     * @example
     * // Get one StressLog
     * const stressLog = await prisma.stressLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StressLogFindFirstArgs>(args?: SelectSubset<T, StressLogFindFirstArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StressLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogFindFirstOrThrowArgs} args - Arguments to find a StressLog
     * @example
     * // Get one StressLog
     * const stressLog = await prisma.stressLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StressLogFindFirstOrThrowArgs>(args?: SelectSubset<T, StressLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StressLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StressLogs
     * const stressLogs = await prisma.stressLog.findMany()
     * 
     * // Get first 10 StressLogs
     * const stressLogs = await prisma.stressLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stressLogWithIdOnly = await prisma.stressLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StressLogFindManyArgs>(args?: SelectSubset<T, StressLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StressLog.
     * @param {StressLogCreateArgs} args - Arguments to create a StressLog.
     * @example
     * // Create one StressLog
     * const StressLog = await prisma.stressLog.create({
     *   data: {
     *     // ... data to create a StressLog
     *   }
     * })
     * 
     */
    create<T extends StressLogCreateArgs>(args: SelectSubset<T, StressLogCreateArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StressLogs.
     * @param {StressLogCreateManyArgs} args - Arguments to create many StressLogs.
     * @example
     * // Create many StressLogs
     * const stressLog = await prisma.stressLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StressLogCreateManyArgs>(args?: SelectSubset<T, StressLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StressLogs and returns the data saved in the database.
     * @param {StressLogCreateManyAndReturnArgs} args - Arguments to create many StressLogs.
     * @example
     * // Create many StressLogs
     * const stressLog = await prisma.stressLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StressLogs and only return the `id`
     * const stressLogWithIdOnly = await prisma.stressLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StressLogCreateManyAndReturnArgs>(args?: SelectSubset<T, StressLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StressLog.
     * @param {StressLogDeleteArgs} args - Arguments to delete one StressLog.
     * @example
     * // Delete one StressLog
     * const StressLog = await prisma.stressLog.delete({
     *   where: {
     *     // ... filter to delete one StressLog
     *   }
     * })
     * 
     */
    delete<T extends StressLogDeleteArgs>(args: SelectSubset<T, StressLogDeleteArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StressLog.
     * @param {StressLogUpdateArgs} args - Arguments to update one StressLog.
     * @example
     * // Update one StressLog
     * const stressLog = await prisma.stressLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StressLogUpdateArgs>(args: SelectSubset<T, StressLogUpdateArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StressLogs.
     * @param {StressLogDeleteManyArgs} args - Arguments to filter StressLogs to delete.
     * @example
     * // Delete a few StressLogs
     * const { count } = await prisma.stressLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StressLogDeleteManyArgs>(args?: SelectSubset<T, StressLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StressLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StressLogs
     * const stressLog = await prisma.stressLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StressLogUpdateManyArgs>(args: SelectSubset<T, StressLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StressLogs and returns the data updated in the database.
     * @param {StressLogUpdateManyAndReturnArgs} args - Arguments to update many StressLogs.
     * @example
     * // Update many StressLogs
     * const stressLog = await prisma.stressLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StressLogs and only return the `id`
     * const stressLogWithIdOnly = await prisma.stressLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StressLogUpdateManyAndReturnArgs>(args: SelectSubset<T, StressLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StressLog.
     * @param {StressLogUpsertArgs} args - Arguments to update or create a StressLog.
     * @example
     * // Update or create a StressLog
     * const stressLog = await prisma.stressLog.upsert({
     *   create: {
     *     // ... data to create a StressLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StressLog we want to update
     *   }
     * })
     */
    upsert<T extends StressLogUpsertArgs>(args: SelectSubset<T, StressLogUpsertArgs<ExtArgs>>): Prisma__StressLogClient<$Result.GetResult<Prisma.$StressLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StressLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogCountArgs} args - Arguments to filter StressLogs to count.
     * @example
     * // Count the number of StressLogs
     * const count = await prisma.stressLog.count({
     *   where: {
     *     // ... the filter for the StressLogs we want to count
     *   }
     * })
    **/
    count<T extends StressLogCountArgs>(
      args?: Subset<T, StressLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StressLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StressLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StressLogAggregateArgs>(args: Subset<T, StressLogAggregateArgs>): Prisma.PrismaPromise<GetStressLogAggregateType<T>>

    /**
     * Group by StressLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StressLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StressLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StressLogGroupByArgs['orderBy'] }
        : { orderBy?: StressLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StressLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStressLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StressLog model
   */
  readonly fields: StressLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StressLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StressLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StressLog model
   */
  interface StressLogFieldRefs {
    readonly id: FieldRef<"StressLog", 'Int'>
    readonly userId: FieldRef<"StressLog", 'Int'>
    readonly level: FieldRef<"StressLog", 'Int'>
    readonly recordedAt: FieldRef<"StressLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StressLog findUnique
   */
  export type StressLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter, which StressLog to fetch.
     */
    where: StressLogWhereUniqueInput
  }

  /**
   * StressLog findUniqueOrThrow
   */
  export type StressLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter, which StressLog to fetch.
     */
    where: StressLogWhereUniqueInput
  }

  /**
   * StressLog findFirst
   */
  export type StressLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter, which StressLog to fetch.
     */
    where?: StressLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StressLogs to fetch.
     */
    orderBy?: StressLogOrderByWithRelationInput | StressLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StressLogs.
     */
    cursor?: StressLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StressLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StressLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StressLogs.
     */
    distinct?: StressLogScalarFieldEnum | StressLogScalarFieldEnum[]
  }

  /**
   * StressLog findFirstOrThrow
   */
  export type StressLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter, which StressLog to fetch.
     */
    where?: StressLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StressLogs to fetch.
     */
    orderBy?: StressLogOrderByWithRelationInput | StressLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StressLogs.
     */
    cursor?: StressLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StressLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StressLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StressLogs.
     */
    distinct?: StressLogScalarFieldEnum | StressLogScalarFieldEnum[]
  }

  /**
   * StressLog findMany
   */
  export type StressLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter, which StressLogs to fetch.
     */
    where?: StressLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StressLogs to fetch.
     */
    orderBy?: StressLogOrderByWithRelationInput | StressLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StressLogs.
     */
    cursor?: StressLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StressLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StressLogs.
     */
    skip?: number
    distinct?: StressLogScalarFieldEnum | StressLogScalarFieldEnum[]
  }

  /**
   * StressLog create
   */
  export type StressLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * The data needed to create a StressLog.
     */
    data: XOR<StressLogCreateInput, StressLogUncheckedCreateInput>
  }

  /**
   * StressLog createMany
   */
  export type StressLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StressLogs.
     */
    data: StressLogCreateManyInput | StressLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StressLog createManyAndReturn
   */
  export type StressLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * The data used to create many StressLogs.
     */
    data: StressLogCreateManyInput | StressLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StressLog update
   */
  export type StressLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * The data needed to update a StressLog.
     */
    data: XOR<StressLogUpdateInput, StressLogUncheckedUpdateInput>
    /**
     * Choose, which StressLog to update.
     */
    where: StressLogWhereUniqueInput
  }

  /**
   * StressLog updateMany
   */
  export type StressLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StressLogs.
     */
    data: XOR<StressLogUpdateManyMutationInput, StressLogUncheckedUpdateManyInput>
    /**
     * Filter which StressLogs to update
     */
    where?: StressLogWhereInput
    /**
     * Limit how many StressLogs to update.
     */
    limit?: number
  }

  /**
   * StressLog updateManyAndReturn
   */
  export type StressLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * The data used to update StressLogs.
     */
    data: XOR<StressLogUpdateManyMutationInput, StressLogUncheckedUpdateManyInput>
    /**
     * Filter which StressLogs to update
     */
    where?: StressLogWhereInput
    /**
     * Limit how many StressLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StressLog upsert
   */
  export type StressLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * The filter to search for the StressLog to update in case it exists.
     */
    where: StressLogWhereUniqueInput
    /**
     * In case the StressLog found by the `where` argument doesn't exist, create a new StressLog with this data.
     */
    create: XOR<StressLogCreateInput, StressLogUncheckedCreateInput>
    /**
     * In case the StressLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StressLogUpdateInput, StressLogUncheckedUpdateInput>
  }

  /**
   * StressLog delete
   */
  export type StressLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
    /**
     * Filter which StressLog to delete.
     */
    where: StressLogWhereUniqueInput
  }

  /**
   * StressLog deleteMany
   */
  export type StressLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StressLogs to delete
     */
    where?: StressLogWhereInput
    /**
     * Limit how many StressLogs to delete.
     */
    limit?: number
  }

  /**
   * StressLog without action
   */
  export type StressLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StressLog
     */
    select?: StressLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StressLog
     */
    omit?: StressLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StressLogInclude<ExtArgs> | null
  }


  /**
   * Model SleepLog
   */

  export type AggregateSleepLog = {
    _count: SleepLogCountAggregateOutputType | null
    _avg: SleepLogAvgAggregateOutputType | null
    _sum: SleepLogSumAggregateOutputType | null
    _min: SleepLogMinAggregateOutputType | null
    _max: SleepLogMaxAggregateOutputType | null
  }

  export type SleepLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    quality: number | null
    hours: number | null
  }

  export type SleepLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    quality: number | null
    hours: number | null
  }

  export type SleepLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    quality: number | null
    hours: number | null
    recordedAt: Date | null
  }

  export type SleepLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    quality: number | null
    hours: number | null
    recordedAt: Date | null
  }

  export type SleepLogCountAggregateOutputType = {
    id: number
    userId: number
    quality: number
    hours: number
    recordedAt: number
    _all: number
  }


  export type SleepLogAvgAggregateInputType = {
    id?: true
    userId?: true
    quality?: true
    hours?: true
  }

  export type SleepLogSumAggregateInputType = {
    id?: true
    userId?: true
    quality?: true
    hours?: true
  }

  export type SleepLogMinAggregateInputType = {
    id?: true
    userId?: true
    quality?: true
    hours?: true
    recordedAt?: true
  }

  export type SleepLogMaxAggregateInputType = {
    id?: true
    userId?: true
    quality?: true
    hours?: true
    recordedAt?: true
  }

  export type SleepLogCountAggregateInputType = {
    id?: true
    userId?: true
    quality?: true
    hours?: true
    recordedAt?: true
    _all?: true
  }

  export type SleepLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SleepLog to aggregate.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SleepLogs
    **/
    _count?: true | SleepLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SleepLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SleepLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SleepLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SleepLogMaxAggregateInputType
  }

  export type GetSleepLogAggregateType<T extends SleepLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSleepLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSleepLog[P]>
      : GetScalarType<T[P], AggregateSleepLog[P]>
  }




  export type SleepLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SleepLogWhereInput
    orderBy?: SleepLogOrderByWithAggregationInput | SleepLogOrderByWithAggregationInput[]
    by: SleepLogScalarFieldEnum[] | SleepLogScalarFieldEnum
    having?: SleepLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SleepLogCountAggregateInputType | true
    _avg?: SleepLogAvgAggregateInputType
    _sum?: SleepLogSumAggregateInputType
    _min?: SleepLogMinAggregateInputType
    _max?: SleepLogMaxAggregateInputType
  }

  export type SleepLogGroupByOutputType = {
    id: number
    userId: number
    quality: number
    hours: number
    recordedAt: Date
    _count: SleepLogCountAggregateOutputType | null
    _avg: SleepLogAvgAggregateOutputType | null
    _sum: SleepLogSumAggregateOutputType | null
    _min: SleepLogMinAggregateOutputType | null
    _max: SleepLogMaxAggregateOutputType | null
  }

  type GetSleepLogGroupByPayload<T extends SleepLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SleepLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SleepLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SleepLogGroupByOutputType[P]>
            : GetScalarType<T[P], SleepLogGroupByOutputType[P]>
        }
      >
    >


  export type SleepLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quality?: boolean
    hours?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sleepLog"]>

  export type SleepLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quality?: boolean
    hours?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sleepLog"]>

  export type SleepLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quality?: boolean
    hours?: boolean
    recordedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sleepLog"]>

  export type SleepLogSelectScalar = {
    id?: boolean
    userId?: boolean
    quality?: boolean
    hours?: boolean
    recordedAt?: boolean
  }

  export type SleepLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "quality" | "hours" | "recordedAt", ExtArgs["result"]["sleepLog"]>
  export type SleepLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SleepLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SleepLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SleepLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SleepLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      quality: number
      hours: number
      recordedAt: Date
    }, ExtArgs["result"]["sleepLog"]>
    composites: {}
  }

  type SleepLogGetPayload<S extends boolean | null | undefined | SleepLogDefaultArgs> = $Result.GetResult<Prisma.$SleepLogPayload, S>

  type SleepLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SleepLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SleepLogCountAggregateInputType | true
    }

  export interface SleepLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SleepLog'], meta: { name: 'SleepLog' } }
    /**
     * Find zero or one SleepLog that matches the filter.
     * @param {SleepLogFindUniqueArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SleepLogFindUniqueArgs>(args: SelectSubset<T, SleepLogFindUniqueArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SleepLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SleepLogFindUniqueOrThrowArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SleepLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SleepLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SleepLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindFirstArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SleepLogFindFirstArgs>(args?: SelectSubset<T, SleepLogFindFirstArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SleepLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindFirstOrThrowArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SleepLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SleepLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SleepLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SleepLogs
     * const sleepLogs = await prisma.sleepLog.findMany()
     * 
     * // Get first 10 SleepLogs
     * const sleepLogs = await prisma.sleepLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sleepLogWithIdOnly = await prisma.sleepLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SleepLogFindManyArgs>(args?: SelectSubset<T, SleepLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SleepLog.
     * @param {SleepLogCreateArgs} args - Arguments to create a SleepLog.
     * @example
     * // Create one SleepLog
     * const SleepLog = await prisma.sleepLog.create({
     *   data: {
     *     // ... data to create a SleepLog
     *   }
     * })
     * 
     */
    create<T extends SleepLogCreateArgs>(args: SelectSubset<T, SleepLogCreateArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SleepLogs.
     * @param {SleepLogCreateManyArgs} args - Arguments to create many SleepLogs.
     * @example
     * // Create many SleepLogs
     * const sleepLog = await prisma.sleepLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SleepLogCreateManyArgs>(args?: SelectSubset<T, SleepLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SleepLogs and returns the data saved in the database.
     * @param {SleepLogCreateManyAndReturnArgs} args - Arguments to create many SleepLogs.
     * @example
     * // Create many SleepLogs
     * const sleepLog = await prisma.sleepLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SleepLogs and only return the `id`
     * const sleepLogWithIdOnly = await prisma.sleepLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SleepLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SleepLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SleepLog.
     * @param {SleepLogDeleteArgs} args - Arguments to delete one SleepLog.
     * @example
     * // Delete one SleepLog
     * const SleepLog = await prisma.sleepLog.delete({
     *   where: {
     *     // ... filter to delete one SleepLog
     *   }
     * })
     * 
     */
    delete<T extends SleepLogDeleteArgs>(args: SelectSubset<T, SleepLogDeleteArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SleepLog.
     * @param {SleepLogUpdateArgs} args - Arguments to update one SleepLog.
     * @example
     * // Update one SleepLog
     * const sleepLog = await prisma.sleepLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SleepLogUpdateArgs>(args: SelectSubset<T, SleepLogUpdateArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SleepLogs.
     * @param {SleepLogDeleteManyArgs} args - Arguments to filter SleepLogs to delete.
     * @example
     * // Delete a few SleepLogs
     * const { count } = await prisma.sleepLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SleepLogDeleteManyArgs>(args?: SelectSubset<T, SleepLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SleepLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SleepLogs
     * const sleepLog = await prisma.sleepLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SleepLogUpdateManyArgs>(args: SelectSubset<T, SleepLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SleepLogs and returns the data updated in the database.
     * @param {SleepLogUpdateManyAndReturnArgs} args - Arguments to update many SleepLogs.
     * @example
     * // Update many SleepLogs
     * const sleepLog = await prisma.sleepLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SleepLogs and only return the `id`
     * const sleepLogWithIdOnly = await prisma.sleepLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SleepLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SleepLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SleepLog.
     * @param {SleepLogUpsertArgs} args - Arguments to update or create a SleepLog.
     * @example
     * // Update or create a SleepLog
     * const sleepLog = await prisma.sleepLog.upsert({
     *   create: {
     *     // ... data to create a SleepLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SleepLog we want to update
     *   }
     * })
     */
    upsert<T extends SleepLogUpsertArgs>(args: SelectSubset<T, SleepLogUpsertArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SleepLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogCountArgs} args - Arguments to filter SleepLogs to count.
     * @example
     * // Count the number of SleepLogs
     * const count = await prisma.sleepLog.count({
     *   where: {
     *     // ... the filter for the SleepLogs we want to count
     *   }
     * })
    **/
    count<T extends SleepLogCountArgs>(
      args?: Subset<T, SleepLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SleepLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SleepLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SleepLogAggregateArgs>(args: Subset<T, SleepLogAggregateArgs>): Prisma.PrismaPromise<GetSleepLogAggregateType<T>>

    /**
     * Group by SleepLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SleepLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SleepLogGroupByArgs['orderBy'] }
        : { orderBy?: SleepLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SleepLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSleepLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SleepLog model
   */
  readonly fields: SleepLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SleepLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SleepLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SleepLog model
   */
  interface SleepLogFieldRefs {
    readonly id: FieldRef<"SleepLog", 'Int'>
    readonly userId: FieldRef<"SleepLog", 'Int'>
    readonly quality: FieldRef<"SleepLog", 'Int'>
    readonly hours: FieldRef<"SleepLog", 'Float'>
    readonly recordedAt: FieldRef<"SleepLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SleepLog findUnique
   */
  export type SleepLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog findUniqueOrThrow
   */
  export type SleepLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog findFirst
   */
  export type SleepLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SleepLogs.
     */
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog findFirstOrThrow
   */
  export type SleepLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SleepLogs.
     */
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog findMany
   */
  export type SleepLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLogs to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog create
   */
  export type SleepLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SleepLog.
     */
    data: XOR<SleepLogCreateInput, SleepLogUncheckedCreateInput>
  }

  /**
   * SleepLog createMany
   */
  export type SleepLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SleepLogs.
     */
    data: SleepLogCreateManyInput | SleepLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SleepLog createManyAndReturn
   */
  export type SleepLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * The data used to create many SleepLogs.
     */
    data: SleepLogCreateManyInput | SleepLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SleepLog update
   */
  export type SleepLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SleepLog.
     */
    data: XOR<SleepLogUpdateInput, SleepLogUncheckedUpdateInput>
    /**
     * Choose, which SleepLog to update.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog updateMany
   */
  export type SleepLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SleepLogs.
     */
    data: XOR<SleepLogUpdateManyMutationInput, SleepLogUncheckedUpdateManyInput>
    /**
     * Filter which SleepLogs to update
     */
    where?: SleepLogWhereInput
    /**
     * Limit how many SleepLogs to update.
     */
    limit?: number
  }

  /**
   * SleepLog updateManyAndReturn
   */
  export type SleepLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * The data used to update SleepLogs.
     */
    data: XOR<SleepLogUpdateManyMutationInput, SleepLogUncheckedUpdateManyInput>
    /**
     * Filter which SleepLogs to update
     */
    where?: SleepLogWhereInput
    /**
     * Limit how many SleepLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SleepLog upsert
   */
  export type SleepLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SleepLog to update in case it exists.
     */
    where: SleepLogWhereUniqueInput
    /**
     * In case the SleepLog found by the `where` argument doesn't exist, create a new SleepLog with this data.
     */
    create: XOR<SleepLogCreateInput, SleepLogUncheckedCreateInput>
    /**
     * In case the SleepLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SleepLogUpdateInput, SleepLogUncheckedUpdateInput>
  }

  /**
   * SleepLog delete
   */
  export type SleepLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter which SleepLog to delete.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog deleteMany
   */
  export type SleepLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SleepLogs to delete
     */
    where?: SleepLogWhereInput
    /**
     * Limit how many SleepLogs to delete.
     */
    limit?: number
  }

  /**
   * SleepLog without action
   */
  export type SleepLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SleepLog
     */
    omit?: SleepLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HeartRateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    bpm: 'bpm',
    recordedAt: 'recordedAt'
  };

  export type HeartRateScalarFieldEnum = (typeof HeartRateScalarFieldEnum)[keyof typeof HeartRateScalarFieldEnum]


  export const StepScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    count: 'count',
    recordedAt: 'recordedAt'
  };

  export type StepScalarFieldEnum = (typeof StepScalarFieldEnum)[keyof typeof StepScalarFieldEnum]


  export const StressLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    level: 'level',
    recordedAt: 'recordedAt'
  };

  export type StressLogScalarFieldEnum = (typeof StressLogScalarFieldEnum)[keyof typeof StressLogScalarFieldEnum]


  export const SleepLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quality: 'quality',
    hours: 'hours',
    recordedAt: 'recordedAt'
  };

  export type SleepLogScalarFieldEnum = (typeof SleepLogScalarFieldEnum)[keyof typeof SleepLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    heartRates?: HeartRateListRelationFilter
    steps?: StepListRelationFilter
    stressLogs?: StressLogListRelationFilter
    sleepLogs?: SleepLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    heartRates?: HeartRateOrderByRelationAggregateInput
    steps?: StepOrderByRelationAggregateInput
    stressLogs?: StressLogOrderByRelationAggregateInput
    sleepLogs?: SleepLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    heartRates?: HeartRateListRelationFilter
    steps?: StepListRelationFilter
    stressLogs?: StressLogListRelationFilter
    sleepLogs?: SleepLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type HeartRateWhereInput = {
    AND?: HeartRateWhereInput | HeartRateWhereInput[]
    OR?: HeartRateWhereInput[]
    NOT?: HeartRateWhereInput | HeartRateWhereInput[]
    id?: IntFilter<"HeartRate"> | number
    userId?: IntFilter<"HeartRate"> | number
    bpm?: IntFilter<"HeartRate"> | number
    recordedAt?: DateTimeFilter<"HeartRate"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type HeartRateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
    recordedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type HeartRateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HeartRateWhereInput | HeartRateWhereInput[]
    OR?: HeartRateWhereInput[]
    NOT?: HeartRateWhereInput | HeartRateWhereInput[]
    userId?: IntFilter<"HeartRate"> | number
    bpm?: IntFilter<"HeartRate"> | number
    recordedAt?: DateTimeFilter<"HeartRate"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type HeartRateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
    recordedAt?: SortOrder
    _count?: HeartRateCountOrderByAggregateInput
    _avg?: HeartRateAvgOrderByAggregateInput
    _max?: HeartRateMaxOrderByAggregateInput
    _min?: HeartRateMinOrderByAggregateInput
    _sum?: HeartRateSumOrderByAggregateInput
  }

  export type HeartRateScalarWhereWithAggregatesInput = {
    AND?: HeartRateScalarWhereWithAggregatesInput | HeartRateScalarWhereWithAggregatesInput[]
    OR?: HeartRateScalarWhereWithAggregatesInput[]
    NOT?: HeartRateScalarWhereWithAggregatesInput | HeartRateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HeartRate"> | number
    userId?: IntWithAggregatesFilter<"HeartRate"> | number
    bpm?: IntWithAggregatesFilter<"HeartRate"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"HeartRate"> | Date | string
  }

  export type StepWhereInput = {
    AND?: StepWhereInput | StepWhereInput[]
    OR?: StepWhereInput[]
    NOT?: StepWhereInput | StepWhereInput[]
    id?: IntFilter<"Step"> | number
    userId?: IntFilter<"Step"> | number
    count?: IntFilter<"Step"> | number
    recordedAt?: DateTimeFilter<"Step"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StepOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
    recordedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StepWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StepWhereInput | StepWhereInput[]
    OR?: StepWhereInput[]
    NOT?: StepWhereInput | StepWhereInput[]
    userId?: IntFilter<"Step"> | number
    count?: IntFilter<"Step"> | number
    recordedAt?: DateTimeFilter<"Step"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StepOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
    recordedAt?: SortOrder
    _count?: StepCountOrderByAggregateInput
    _avg?: StepAvgOrderByAggregateInput
    _max?: StepMaxOrderByAggregateInput
    _min?: StepMinOrderByAggregateInput
    _sum?: StepSumOrderByAggregateInput
  }

  export type StepScalarWhereWithAggregatesInput = {
    AND?: StepScalarWhereWithAggregatesInput | StepScalarWhereWithAggregatesInput[]
    OR?: StepScalarWhereWithAggregatesInput[]
    NOT?: StepScalarWhereWithAggregatesInput | StepScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Step"> | number
    userId?: IntWithAggregatesFilter<"Step"> | number
    count?: IntWithAggregatesFilter<"Step"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"Step"> | Date | string
  }

  export type StressLogWhereInput = {
    AND?: StressLogWhereInput | StressLogWhereInput[]
    OR?: StressLogWhereInput[]
    NOT?: StressLogWhereInput | StressLogWhereInput[]
    id?: IntFilter<"StressLog"> | number
    userId?: IntFilter<"StressLog"> | number
    level?: IntFilter<"StressLog"> | number
    recordedAt?: DateTimeFilter<"StressLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StressLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type StressLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StressLogWhereInput | StressLogWhereInput[]
    OR?: StressLogWhereInput[]
    NOT?: StressLogWhereInput | StressLogWhereInput[]
    userId?: IntFilter<"StressLog"> | number
    level?: IntFilter<"StressLog"> | number
    recordedAt?: DateTimeFilter<"StressLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StressLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
    _count?: StressLogCountOrderByAggregateInput
    _avg?: StressLogAvgOrderByAggregateInput
    _max?: StressLogMaxOrderByAggregateInput
    _min?: StressLogMinOrderByAggregateInput
    _sum?: StressLogSumOrderByAggregateInput
  }

  export type StressLogScalarWhereWithAggregatesInput = {
    AND?: StressLogScalarWhereWithAggregatesInput | StressLogScalarWhereWithAggregatesInput[]
    OR?: StressLogScalarWhereWithAggregatesInput[]
    NOT?: StressLogScalarWhereWithAggregatesInput | StressLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StressLog"> | number
    userId?: IntWithAggregatesFilter<"StressLog"> | number
    level?: IntWithAggregatesFilter<"StressLog"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"StressLog"> | Date | string
  }

  export type SleepLogWhereInput = {
    AND?: SleepLogWhereInput | SleepLogWhereInput[]
    OR?: SleepLogWhereInput[]
    NOT?: SleepLogWhereInput | SleepLogWhereInput[]
    id?: IntFilter<"SleepLog"> | number
    userId?: IntFilter<"SleepLog"> | number
    quality?: IntFilter<"SleepLog"> | number
    hours?: FloatFilter<"SleepLog"> | number
    recordedAt?: DateTimeFilter<"SleepLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SleepLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
    recordedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SleepLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SleepLogWhereInput | SleepLogWhereInput[]
    OR?: SleepLogWhereInput[]
    NOT?: SleepLogWhereInput | SleepLogWhereInput[]
    userId?: IntFilter<"SleepLog"> | number
    quality?: IntFilter<"SleepLog"> | number
    hours?: FloatFilter<"SleepLog"> | number
    recordedAt?: DateTimeFilter<"SleepLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SleepLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
    recordedAt?: SortOrder
    _count?: SleepLogCountOrderByAggregateInput
    _avg?: SleepLogAvgOrderByAggregateInput
    _max?: SleepLogMaxOrderByAggregateInput
    _min?: SleepLogMinOrderByAggregateInput
    _sum?: SleepLogSumOrderByAggregateInput
  }

  export type SleepLogScalarWhereWithAggregatesInput = {
    AND?: SleepLogScalarWhereWithAggregatesInput | SleepLogScalarWhereWithAggregatesInput[]
    OR?: SleepLogScalarWhereWithAggregatesInput[]
    NOT?: SleepLogScalarWhereWithAggregatesInput | SleepLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SleepLog"> | number
    userId?: IntWithAggregatesFilter<"SleepLog"> | number
    quality?: IntWithAggregatesFilter<"SleepLog"> | number
    hours?: FloatWithAggregatesFilter<"SleepLog"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateCreateNestedManyWithoutUserInput
    steps?: StepCreateNestedManyWithoutUserInput
    stressLogs?: StressLogCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateUncheckedCreateNestedManyWithoutUserInput
    steps?: StepUncheckedCreateNestedManyWithoutUserInput
    stressLogs?: StressLogUncheckedCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUpdateManyWithoutUserNestedInput
    steps?: StepUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUncheckedUpdateManyWithoutUserNestedInput
    steps?: StepUncheckedUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUncheckedUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeartRateCreateInput = {
    bpm: number
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutHeartRatesInput
  }

  export type HeartRateUncheckedCreateInput = {
    id?: number
    userId: number
    bpm: number
    recordedAt?: Date | string
  }

  export type HeartRateUpdateInput = {
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHeartRatesNestedInput
  }

  export type HeartRateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeartRateCreateManyInput = {
    id?: number
    userId: number
    bpm: number
    recordedAt?: Date | string
  }

  export type HeartRateUpdateManyMutationInput = {
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeartRateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepCreateInput = {
    count: number
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutStepsInput
  }

  export type StepUncheckedCreateInput = {
    id?: number
    userId: number
    count: number
    recordedAt?: Date | string
  }

  export type StepUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStepsNestedInput
  }

  export type StepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepCreateManyInput = {
    id?: number
    userId: number
    count: number
    recordedAt?: Date | string
  }

  export type StepUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogCreateInput = {
    level: number
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutStressLogsInput
  }

  export type StressLogUncheckedCreateInput = {
    id?: number
    userId: number
    level: number
    recordedAt?: Date | string
  }

  export type StressLogUpdateInput = {
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStressLogsNestedInput
  }

  export type StressLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogCreateManyInput = {
    id?: number
    userId: number
    level: number
    recordedAt?: Date | string
  }

  export type StressLogUpdateManyMutationInput = {
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogCreateInput = {
    quality: number
    hours: number
    recordedAt?: Date | string
    user: UserCreateNestedOneWithoutSleepLogsInput
  }

  export type SleepLogUncheckedCreateInput = {
    id?: number
    userId: number
    quality: number
    hours: number
    recordedAt?: Date | string
  }

  export type SleepLogUpdateInput = {
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSleepLogsNestedInput
  }

  export type SleepLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogCreateManyInput = {
    id?: number
    userId: number
    quality: number
    hours: number
    recordedAt?: Date | string
  }

  export type SleepLogUpdateManyMutationInput = {
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type HeartRateListRelationFilter = {
    every?: HeartRateWhereInput
    some?: HeartRateWhereInput
    none?: HeartRateWhereInput
  }

  export type StepListRelationFilter = {
    every?: StepWhereInput
    some?: StepWhereInput
    none?: StepWhereInput
  }

  export type StressLogListRelationFilter = {
    every?: StressLogWhereInput
    some?: StressLogWhereInput
    none?: StressLogWhereInput
  }

  export type SleepLogListRelationFilter = {
    every?: SleepLogWhereInput
    some?: SleepLogWhereInput
    none?: SleepLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HeartRateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StressLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SleepLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HeartRateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
    recordedAt?: SortOrder
  }

  export type HeartRateAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
  }

  export type HeartRateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
    recordedAt?: SortOrder
  }

  export type HeartRateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
    recordedAt?: SortOrder
  }

  export type HeartRateSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bpm?: SortOrder
  }

  export type StepCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
    recordedAt?: SortOrder
  }

  export type StepAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
  }

  export type StepMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
    recordedAt?: SortOrder
  }

  export type StepMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
    recordedAt?: SortOrder
  }

  export type StepSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    count?: SortOrder
  }

  export type StressLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
  }

  export type StressLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
  }

  export type StressLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
  }

  export type StressLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
    recordedAt?: SortOrder
  }

  export type StressLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    level?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SleepLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
    recordedAt?: SortOrder
  }

  export type SleepLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
  }

  export type SleepLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
    recordedAt?: SortOrder
  }

  export type SleepLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
    recordedAt?: SortOrder
  }

  export type SleepLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quality?: SortOrder
    hours?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type HeartRateCreateNestedManyWithoutUserInput = {
    create?: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput> | HeartRateCreateWithoutUserInput[] | HeartRateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HeartRateCreateOrConnectWithoutUserInput | HeartRateCreateOrConnectWithoutUserInput[]
    createMany?: HeartRateCreateManyUserInputEnvelope
    connect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
  }

  export type StepCreateNestedManyWithoutUserInput = {
    create?: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput> | StepCreateWithoutUserInput[] | StepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StepCreateOrConnectWithoutUserInput | StepCreateOrConnectWithoutUserInput[]
    createMany?: StepCreateManyUserInputEnvelope
    connect?: StepWhereUniqueInput | StepWhereUniqueInput[]
  }

  export type StressLogCreateNestedManyWithoutUserInput = {
    create?: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput> | StressLogCreateWithoutUserInput[] | StressLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StressLogCreateOrConnectWithoutUserInput | StressLogCreateOrConnectWithoutUserInput[]
    createMany?: StressLogCreateManyUserInputEnvelope
    connect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
  }

  export type SleepLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput> | SleepLogCreateWithoutUserInput[] | SleepLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutUserInput | SleepLogCreateOrConnectWithoutUserInput[]
    createMany?: SleepLogCreateManyUserInputEnvelope
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
  }

  export type HeartRateUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput> | HeartRateCreateWithoutUserInput[] | HeartRateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HeartRateCreateOrConnectWithoutUserInput | HeartRateCreateOrConnectWithoutUserInput[]
    createMany?: HeartRateCreateManyUserInputEnvelope
    connect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
  }

  export type StepUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput> | StepCreateWithoutUserInput[] | StepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StepCreateOrConnectWithoutUserInput | StepCreateOrConnectWithoutUserInput[]
    createMany?: StepCreateManyUserInputEnvelope
    connect?: StepWhereUniqueInput | StepWhereUniqueInput[]
  }

  export type StressLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput> | StressLogCreateWithoutUserInput[] | StressLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StressLogCreateOrConnectWithoutUserInput | StressLogCreateOrConnectWithoutUserInput[]
    createMany?: StressLogCreateManyUserInputEnvelope
    connect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
  }

  export type SleepLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput> | SleepLogCreateWithoutUserInput[] | SleepLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutUserInput | SleepLogCreateOrConnectWithoutUserInput[]
    createMany?: SleepLogCreateManyUserInputEnvelope
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type HeartRateUpdateManyWithoutUserNestedInput = {
    create?: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput> | HeartRateCreateWithoutUserInput[] | HeartRateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HeartRateCreateOrConnectWithoutUserInput | HeartRateCreateOrConnectWithoutUserInput[]
    upsert?: HeartRateUpsertWithWhereUniqueWithoutUserInput | HeartRateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HeartRateCreateManyUserInputEnvelope
    set?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    disconnect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    delete?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    connect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    update?: HeartRateUpdateWithWhereUniqueWithoutUserInput | HeartRateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HeartRateUpdateManyWithWhereWithoutUserInput | HeartRateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HeartRateScalarWhereInput | HeartRateScalarWhereInput[]
  }

  export type StepUpdateManyWithoutUserNestedInput = {
    create?: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput> | StepCreateWithoutUserInput[] | StepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StepCreateOrConnectWithoutUserInput | StepCreateOrConnectWithoutUserInput[]
    upsert?: StepUpsertWithWhereUniqueWithoutUserInput | StepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StepCreateManyUserInputEnvelope
    set?: StepWhereUniqueInput | StepWhereUniqueInput[]
    disconnect?: StepWhereUniqueInput | StepWhereUniqueInput[]
    delete?: StepWhereUniqueInput | StepWhereUniqueInput[]
    connect?: StepWhereUniqueInput | StepWhereUniqueInput[]
    update?: StepUpdateWithWhereUniqueWithoutUserInput | StepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StepUpdateManyWithWhereWithoutUserInput | StepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StepScalarWhereInput | StepScalarWhereInput[]
  }

  export type StressLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput> | StressLogCreateWithoutUserInput[] | StressLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StressLogCreateOrConnectWithoutUserInput | StressLogCreateOrConnectWithoutUserInput[]
    upsert?: StressLogUpsertWithWhereUniqueWithoutUserInput | StressLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StressLogCreateManyUserInputEnvelope
    set?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    disconnect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    delete?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    connect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    update?: StressLogUpdateWithWhereUniqueWithoutUserInput | StressLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StressLogUpdateManyWithWhereWithoutUserInput | StressLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StressLogScalarWhereInput | StressLogScalarWhereInput[]
  }

  export type SleepLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput> | SleepLogCreateWithoutUserInput[] | SleepLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutUserInput | SleepLogCreateOrConnectWithoutUserInput[]
    upsert?: SleepLogUpsertWithWhereUniqueWithoutUserInput | SleepLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SleepLogCreateManyUserInputEnvelope
    set?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    disconnect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    delete?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    update?: SleepLogUpdateWithWhereUniqueWithoutUserInput | SleepLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SleepLogUpdateManyWithWhereWithoutUserInput | SleepLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HeartRateUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput> | HeartRateCreateWithoutUserInput[] | HeartRateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HeartRateCreateOrConnectWithoutUserInput | HeartRateCreateOrConnectWithoutUserInput[]
    upsert?: HeartRateUpsertWithWhereUniqueWithoutUserInput | HeartRateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HeartRateCreateManyUserInputEnvelope
    set?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    disconnect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    delete?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    connect?: HeartRateWhereUniqueInput | HeartRateWhereUniqueInput[]
    update?: HeartRateUpdateWithWhereUniqueWithoutUserInput | HeartRateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HeartRateUpdateManyWithWhereWithoutUserInput | HeartRateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HeartRateScalarWhereInput | HeartRateScalarWhereInput[]
  }

  export type StepUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput> | StepCreateWithoutUserInput[] | StepUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StepCreateOrConnectWithoutUserInput | StepCreateOrConnectWithoutUserInput[]
    upsert?: StepUpsertWithWhereUniqueWithoutUserInput | StepUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StepCreateManyUserInputEnvelope
    set?: StepWhereUniqueInput | StepWhereUniqueInput[]
    disconnect?: StepWhereUniqueInput | StepWhereUniqueInput[]
    delete?: StepWhereUniqueInput | StepWhereUniqueInput[]
    connect?: StepWhereUniqueInput | StepWhereUniqueInput[]
    update?: StepUpdateWithWhereUniqueWithoutUserInput | StepUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StepUpdateManyWithWhereWithoutUserInput | StepUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StepScalarWhereInput | StepScalarWhereInput[]
  }

  export type StressLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput> | StressLogCreateWithoutUserInput[] | StressLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StressLogCreateOrConnectWithoutUserInput | StressLogCreateOrConnectWithoutUserInput[]
    upsert?: StressLogUpsertWithWhereUniqueWithoutUserInput | StressLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StressLogCreateManyUserInputEnvelope
    set?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    disconnect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    delete?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    connect?: StressLogWhereUniqueInput | StressLogWhereUniqueInput[]
    update?: StressLogUpdateWithWhereUniqueWithoutUserInput | StressLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StressLogUpdateManyWithWhereWithoutUserInput | StressLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StressLogScalarWhereInput | StressLogScalarWhereInput[]
  }

  export type SleepLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput> | SleepLogCreateWithoutUserInput[] | SleepLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutUserInput | SleepLogCreateOrConnectWithoutUserInput[]
    upsert?: SleepLogUpsertWithWhereUniqueWithoutUserInput | SleepLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SleepLogCreateManyUserInputEnvelope
    set?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    disconnect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    delete?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    update?: SleepLogUpdateWithWhereUniqueWithoutUserInput | SleepLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SleepLogUpdateManyWithWhereWithoutUserInput | SleepLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHeartRatesInput = {
    create?: XOR<UserCreateWithoutHeartRatesInput, UserUncheckedCreateWithoutHeartRatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHeartRatesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHeartRatesNestedInput = {
    create?: XOR<UserCreateWithoutHeartRatesInput, UserUncheckedCreateWithoutHeartRatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHeartRatesInput
    upsert?: UserUpsertWithoutHeartRatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHeartRatesInput, UserUpdateWithoutHeartRatesInput>, UserUncheckedUpdateWithoutHeartRatesInput>
  }

  export type UserCreateNestedOneWithoutStepsInput = {
    create?: XOR<UserCreateWithoutStepsInput, UserUncheckedCreateWithoutStepsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStepsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStepsNestedInput = {
    create?: XOR<UserCreateWithoutStepsInput, UserUncheckedCreateWithoutStepsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStepsInput
    upsert?: UserUpsertWithoutStepsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStepsInput, UserUpdateWithoutStepsInput>, UserUncheckedUpdateWithoutStepsInput>
  }

  export type UserCreateNestedOneWithoutStressLogsInput = {
    create?: XOR<UserCreateWithoutStressLogsInput, UserUncheckedCreateWithoutStressLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStressLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStressLogsNestedInput = {
    create?: XOR<UserCreateWithoutStressLogsInput, UserUncheckedCreateWithoutStressLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStressLogsInput
    upsert?: UserUpsertWithoutStressLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStressLogsInput, UserUpdateWithoutStressLogsInput>, UserUncheckedUpdateWithoutStressLogsInput>
  }

  export type UserCreateNestedOneWithoutSleepLogsInput = {
    create?: XOR<UserCreateWithoutSleepLogsInput, UserUncheckedCreateWithoutSleepLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSleepLogsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSleepLogsNestedInput = {
    create?: XOR<UserCreateWithoutSleepLogsInput, UserUncheckedCreateWithoutSleepLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSleepLogsInput
    upsert?: UserUpsertWithoutSleepLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSleepLogsInput, UserUpdateWithoutSleepLogsInput>, UserUncheckedUpdateWithoutSleepLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type HeartRateCreateWithoutUserInput = {
    bpm: number
    recordedAt?: Date | string
  }

  export type HeartRateUncheckedCreateWithoutUserInput = {
    id?: number
    bpm: number
    recordedAt?: Date | string
  }

  export type HeartRateCreateOrConnectWithoutUserInput = {
    where: HeartRateWhereUniqueInput
    create: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput>
  }

  export type HeartRateCreateManyUserInputEnvelope = {
    data: HeartRateCreateManyUserInput | HeartRateCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StepCreateWithoutUserInput = {
    count: number
    recordedAt?: Date | string
  }

  export type StepUncheckedCreateWithoutUserInput = {
    id?: number
    count: number
    recordedAt?: Date | string
  }

  export type StepCreateOrConnectWithoutUserInput = {
    where: StepWhereUniqueInput
    create: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput>
  }

  export type StepCreateManyUserInputEnvelope = {
    data: StepCreateManyUserInput | StepCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StressLogCreateWithoutUserInput = {
    level: number
    recordedAt?: Date | string
  }

  export type StressLogUncheckedCreateWithoutUserInput = {
    id?: number
    level: number
    recordedAt?: Date | string
  }

  export type StressLogCreateOrConnectWithoutUserInput = {
    where: StressLogWhereUniqueInput
    create: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput>
  }

  export type StressLogCreateManyUserInputEnvelope = {
    data: StressLogCreateManyUserInput | StressLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SleepLogCreateWithoutUserInput = {
    quality: number
    hours: number
    recordedAt?: Date | string
  }

  export type SleepLogUncheckedCreateWithoutUserInput = {
    id?: number
    quality: number
    hours: number
    recordedAt?: Date | string
  }

  export type SleepLogCreateOrConnectWithoutUserInput = {
    where: SleepLogWhereUniqueInput
    create: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput>
  }

  export type SleepLogCreateManyUserInputEnvelope = {
    data: SleepLogCreateManyUserInput | SleepLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HeartRateUpsertWithWhereUniqueWithoutUserInput = {
    where: HeartRateWhereUniqueInput
    update: XOR<HeartRateUpdateWithoutUserInput, HeartRateUncheckedUpdateWithoutUserInput>
    create: XOR<HeartRateCreateWithoutUserInput, HeartRateUncheckedCreateWithoutUserInput>
  }

  export type HeartRateUpdateWithWhereUniqueWithoutUserInput = {
    where: HeartRateWhereUniqueInput
    data: XOR<HeartRateUpdateWithoutUserInput, HeartRateUncheckedUpdateWithoutUserInput>
  }

  export type HeartRateUpdateManyWithWhereWithoutUserInput = {
    where: HeartRateScalarWhereInput
    data: XOR<HeartRateUpdateManyMutationInput, HeartRateUncheckedUpdateManyWithoutUserInput>
  }

  export type HeartRateScalarWhereInput = {
    AND?: HeartRateScalarWhereInput | HeartRateScalarWhereInput[]
    OR?: HeartRateScalarWhereInput[]
    NOT?: HeartRateScalarWhereInput | HeartRateScalarWhereInput[]
    id?: IntFilter<"HeartRate"> | number
    userId?: IntFilter<"HeartRate"> | number
    bpm?: IntFilter<"HeartRate"> | number
    recordedAt?: DateTimeFilter<"HeartRate"> | Date | string
  }

  export type StepUpsertWithWhereUniqueWithoutUserInput = {
    where: StepWhereUniqueInput
    update: XOR<StepUpdateWithoutUserInput, StepUncheckedUpdateWithoutUserInput>
    create: XOR<StepCreateWithoutUserInput, StepUncheckedCreateWithoutUserInput>
  }

  export type StepUpdateWithWhereUniqueWithoutUserInput = {
    where: StepWhereUniqueInput
    data: XOR<StepUpdateWithoutUserInput, StepUncheckedUpdateWithoutUserInput>
  }

  export type StepUpdateManyWithWhereWithoutUserInput = {
    where: StepScalarWhereInput
    data: XOR<StepUpdateManyMutationInput, StepUncheckedUpdateManyWithoutUserInput>
  }

  export type StepScalarWhereInput = {
    AND?: StepScalarWhereInput | StepScalarWhereInput[]
    OR?: StepScalarWhereInput[]
    NOT?: StepScalarWhereInput | StepScalarWhereInput[]
    id?: IntFilter<"Step"> | number
    userId?: IntFilter<"Step"> | number
    count?: IntFilter<"Step"> | number
    recordedAt?: DateTimeFilter<"Step"> | Date | string
  }

  export type StressLogUpsertWithWhereUniqueWithoutUserInput = {
    where: StressLogWhereUniqueInput
    update: XOR<StressLogUpdateWithoutUserInput, StressLogUncheckedUpdateWithoutUserInput>
    create: XOR<StressLogCreateWithoutUserInput, StressLogUncheckedCreateWithoutUserInput>
  }

  export type StressLogUpdateWithWhereUniqueWithoutUserInput = {
    where: StressLogWhereUniqueInput
    data: XOR<StressLogUpdateWithoutUserInput, StressLogUncheckedUpdateWithoutUserInput>
  }

  export type StressLogUpdateManyWithWhereWithoutUserInput = {
    where: StressLogScalarWhereInput
    data: XOR<StressLogUpdateManyMutationInput, StressLogUncheckedUpdateManyWithoutUserInput>
  }

  export type StressLogScalarWhereInput = {
    AND?: StressLogScalarWhereInput | StressLogScalarWhereInput[]
    OR?: StressLogScalarWhereInput[]
    NOT?: StressLogScalarWhereInput | StressLogScalarWhereInput[]
    id?: IntFilter<"StressLog"> | number
    userId?: IntFilter<"StressLog"> | number
    level?: IntFilter<"StressLog"> | number
    recordedAt?: DateTimeFilter<"StressLog"> | Date | string
  }

  export type SleepLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SleepLogWhereUniqueInput
    update: XOR<SleepLogUpdateWithoutUserInput, SleepLogUncheckedUpdateWithoutUserInput>
    create: XOR<SleepLogCreateWithoutUserInput, SleepLogUncheckedCreateWithoutUserInput>
  }

  export type SleepLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SleepLogWhereUniqueInput
    data: XOR<SleepLogUpdateWithoutUserInput, SleepLogUncheckedUpdateWithoutUserInput>
  }

  export type SleepLogUpdateManyWithWhereWithoutUserInput = {
    where: SleepLogScalarWhereInput
    data: XOR<SleepLogUpdateManyMutationInput, SleepLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SleepLogScalarWhereInput = {
    AND?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
    OR?: SleepLogScalarWhereInput[]
    NOT?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
    id?: IntFilter<"SleepLog"> | number
    userId?: IntFilter<"SleepLog"> | number
    quality?: IntFilter<"SleepLog"> | number
    hours?: FloatFilter<"SleepLog"> | number
    recordedAt?: DateTimeFilter<"SleepLog"> | Date | string
  }

  export type UserCreateWithoutHeartRatesInput = {
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: StepCreateNestedManyWithoutUserInput
    stressLogs?: StressLogCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHeartRatesInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    steps?: StepUncheckedCreateNestedManyWithoutUserInput
    stressLogs?: StressLogUncheckedCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHeartRatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHeartRatesInput, UserUncheckedCreateWithoutHeartRatesInput>
  }

  export type UserUpsertWithoutHeartRatesInput = {
    update: XOR<UserUpdateWithoutHeartRatesInput, UserUncheckedUpdateWithoutHeartRatesInput>
    create: XOR<UserCreateWithoutHeartRatesInput, UserUncheckedCreateWithoutHeartRatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHeartRatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHeartRatesInput, UserUncheckedUpdateWithoutHeartRatesInput>
  }

  export type UserUpdateWithoutHeartRatesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: StepUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHeartRatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    steps?: StepUncheckedUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUncheckedUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStepsInput = {
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateCreateNestedManyWithoutUserInput
    stressLogs?: StressLogCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStepsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateUncheckedCreateNestedManyWithoutUserInput
    stressLogs?: StressLogUncheckedCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStepsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStepsInput, UserUncheckedCreateWithoutStepsInput>
  }

  export type UserUpsertWithoutStepsInput = {
    update: XOR<UserUpdateWithoutStepsInput, UserUncheckedUpdateWithoutStepsInput>
    create: XOR<UserCreateWithoutStepsInput, UserUncheckedCreateWithoutStepsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStepsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStepsInput, UserUncheckedUpdateWithoutStepsInput>
  }

  export type UserUpdateWithoutStepsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUncheckedUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUncheckedUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStressLogsInput = {
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateCreateNestedManyWithoutUserInput
    steps?: StepCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStressLogsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateUncheckedCreateNestedManyWithoutUserInput
    steps?: StepUncheckedCreateNestedManyWithoutUserInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStressLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStressLogsInput, UserUncheckedCreateWithoutStressLogsInput>
  }

  export type UserUpsertWithoutStressLogsInput = {
    update: XOR<UserUpdateWithoutStressLogsInput, UserUncheckedUpdateWithoutStressLogsInput>
    create: XOR<UserCreateWithoutStressLogsInput, UserUncheckedCreateWithoutStressLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStressLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStressLogsInput, UserUncheckedUpdateWithoutStressLogsInput>
  }

  export type UserUpdateWithoutStressLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUpdateManyWithoutUserNestedInput
    steps?: StepUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStressLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUncheckedUpdateManyWithoutUserNestedInput
    steps?: StepUncheckedUpdateManyWithoutUserNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSleepLogsInput = {
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateCreateNestedManyWithoutUserInput
    steps?: StepCreateNestedManyWithoutUserInput
    stressLogs?: StressLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSleepLogsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    heartRates?: HeartRateUncheckedCreateNestedManyWithoutUserInput
    steps?: StepUncheckedCreateNestedManyWithoutUserInput
    stressLogs?: StressLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSleepLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSleepLogsInput, UserUncheckedCreateWithoutSleepLogsInput>
  }

  export type UserUpsertWithoutSleepLogsInput = {
    update: XOR<UserUpdateWithoutSleepLogsInput, UserUncheckedUpdateWithoutSleepLogsInput>
    create: XOR<UserCreateWithoutSleepLogsInput, UserUncheckedCreateWithoutSleepLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSleepLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSleepLogsInput, UserUncheckedUpdateWithoutSleepLogsInput>
  }

  export type UserUpdateWithoutSleepLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUpdateManyWithoutUserNestedInput
    steps?: StepUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSleepLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    heartRates?: HeartRateUncheckedUpdateManyWithoutUserNestedInput
    steps?: StepUncheckedUpdateManyWithoutUserNestedInput
    stressLogs?: StressLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HeartRateCreateManyUserInput = {
    id?: number
    bpm: number
    recordedAt?: Date | string
  }

  export type StepCreateManyUserInput = {
    id?: number
    count: number
    recordedAt?: Date | string
  }

  export type StressLogCreateManyUserInput = {
    id?: number
    level: number
    recordedAt?: Date | string
  }

  export type SleepLogCreateManyUserInput = {
    id?: number
    quality: number
    hours: number
    recordedAt?: Date | string
  }

  export type HeartRateUpdateWithoutUserInput = {
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeartRateUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HeartRateUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    bpm?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepUpdateWithoutUserInput = {
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StepUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogUpdateWithoutUserInput = {
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StressLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUpdateWithoutUserInput = {
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    quality?: IntFieldUpdateOperationsInput | number
    hours?: FloatFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}